import "tfplan/v2" as tfplan
import "strings"

//param allowed_dns_servers default ["10.0.0.4", "10.0.0.5",]
param allowed_dns_servers

allVirtualNetworks = filter tfplan.resource_changes as _, rc {
        (rc.type is "azurerm_virtual_network") and 
        (rc.change.actions contains "create" or rc.change.actions contains "no-op" or
        rc.change.actions contains "update") and  rc.mode is "managed" and 
        rc.provider_name is "registry.terraform.io/hashicorp/azurerm"
}

print ("Ensure only allowed DNS servers are attached to the virtual network")


check_dns_servers_block_exists = func() {
    violation_count = 0

    for allVirtualNetworks as _, vn {
        if (keys(vn.change.after) not contains "dns_servers") {    
            resource_name = vn.change.after.name
            violation_msg = "\nPolicy Violation [Virtual Network]\n\nResource - " + vn.address + "\nExplanation - The attribute \"dns_servers\" is missing for resource name: " + resource_name
            print(violation_msg)
            remediation_msg = "Remediation - Ensure attribute \"dns_servers\" is present with allowed list of dns servers' i.e " 
            print(remediation_msg, allowed_dns_servers)
            violation_count +=  1
        }
    }

    if (violation_count > 0) {
       return false
    } else {
       return true
    }
} 


ensure_allowed_dns_servers = func() {
    violation_count = 0
    invalid_dns_server_list = []

    for allVirtualNetworks as _, vn {

        resource_name = vn.change.after.name
        allowed_dns_server_list = allowed_dns_servers
        dns_server_ip_list = vn.change.after.dns_servers
        
        /* Debugging steps
        print("DNS Server list item 1:", dns_server_ip_list[0])
        print("DNS Server list item 2:", dns_server_ip_list[1])
     
        print("\nLength of DNS server list:", length(dns_server_ip_list))
        count_dns_servers = length(dns_server_ip_list)

        print("\nUser provided DNS servers:", dns_server_ip_list)

        print("\nAllowed DNS servers:", allowed_dns_server_list)
        print("\n")
        */

        for dns_server_ip_list as _, dsl {
            if dsl not in allowed_dns_server_list {
                append(invalid_dns_server_list, dsl)
                violation_count += 1
            }
        }

        if (violation_count > 0) {
            violation_msg_prt1 = "\nPolicy Violation [Virtual Network]\n\nResource - " + vn.address + "\nExplanation - The provided dns server(s)"
            violation_msg_prt2 = "are not from the allowed list for resource name: " + resource_name
            remediation_msg = "Remediation - Ensure provided dns server or list of dns servers is from the approved list. DNS server block must ONLY have values from"
            print(violation_msg_prt1, invalid_dns_server_list, violation_msg_prt2)
            print(remediation_msg, allowed_dns_server_list)
            invalid_dns_server_list = []
        }
    }  
      
    if (violation_count > 0) {
        return false
    } else {
        return true
    }
}



main = rule {
    check_dns_servers_block_exists() and
    ensure_allowed_dns_servers()
}
